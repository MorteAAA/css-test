// Uses Declarative syntax to run commands inside a container.
pipeline {
    agent {
        kubernetes {
            // Rather than inline YAML, in a multibranch Pipeline you could use: yamlFile 'jenkins-pod.yaml'
            // Or, to avoid YAML:
            // containerTemplate {
            //     name 'shell'
            //     image 'ubuntu'
            //     command 'sleep'
            //     args 'infinity'
            // }
            yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: shell
    image: ubuntu
    command:
    - sleep
    args:
    - infinity
'''
            // Can also wrap individual steps:
            // container('shell') {
            //     sh 'hostname'
            // }
            defaultContainer 'shell'
        }
    }
    stages {
        stage('Publish Test Results') {
            steps {
        // Publish Junit test result reports
            junit '**/target/*.xml'
        }//steps
    }
	    stage('Publish Coverage Reports') {
	      steps {
		// Publish the code coverage report with PublishHTML plugin
		// (Assuming the JaCoCo report is already generated in the target directory)
		// This will publish UT & IT coverage in two different reports using html generated by jacoco
		publishHTML([
		  allowMissing: false,
		  alwaysLinkToLastBuild: false,
		  keepAll: true,
		  reportDir: 'target',
		  reportFiles: 'index.html',
		  reportName: 'UT Coverage Report'
		])
		publishHTML([
		  allowMissing: false,
		  alwaysLinkToLastBuild: false,
		  keepAll: true,
		  reportDir: 'target',
		  reportFiles: 'index.html',
		  reportName: 'IT Coverage Report'
		])
	      }
	    }
    }
}

